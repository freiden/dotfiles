require 'rubygems'
require 'irb/completion'
require 'irb/ext/save-history'

ARGV.concat [ "--readline", "--prompt-mode", "simple" ]

IRB.conf[:AUTO_INDENT] = true
IRB.conf[:SAVE_HISTORY] = 1000
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb_history"

ANSI ||= {}
ANSI[:RESET] = "\e[0m"
ANSI[:BOLD] = "\e[1m"
ANSI[:UNDERLINE] = "\e[4m"
ANSI[:LGRAY] = "\e[0;37m"
ANSI[:GRAY] = "\e[1;30m"
ANSI[:RED] = "\e[31m"
ANSI[:GREEN] = "\e[32m"
ANSI[:YELLOW] = "\e[33m"
ANSI[:BLUE] = "\e[34m"
ANSI[:MAGENTA] = "\e[35m"
ANSI[:CYAN] = "\e[36m"
ANSI[:WHITE] = "\e[37m"

# Build a simple colorful IRB prompt
IRB.conf[:PROMPT][:SIMPLE_COLOR] = {
:PROMPT_I => "#{ANSI[:BLUE]}>>#{ANSI[:RESET]} ",
:PROMPT_N => "#{ANSI[:BLUE]}>>#{ANSI[:RESET]} ",
:PROMPT_C => "#{ANSI[:RED]}?>#{ANSI[:RESET]} ",
:PROMPT_S => "#{ANSI[:YELLOW]}?>#{ANSI[:RESET]} ",
:RETURN => "#{ANSI[:GREEN]}=>#{ANSI[:RESET]} %s\n",
:AUTO_INDENT => true }
IRB.conf[:PROMPT_MODE] = :SIMPLE_COLOR

# Loading extensions of the console. This is wrapped
# because some might not be included in your Gemfile
# and errors will be raised
def extend_console(name, care = true, required = true)
  if care
    require name if required
    yield if block_given?
    $console_extensions << "#{ANSI[:GREEN]}#{name}#{ANSI[:RESET]}"
  else
    $console_extensions << "#{ANSI[:GRAY]}#{name}#{ANSI[:RESET]}"
  end
rescue LoadError
  $console_extensions << "#{ANSI[:RED]}#{name} could not been loaded, gem probably missing.#{ANSI[:RESET]}"
end
$console_extensions = []

# Brice is a gem that handles coloring the IRB output,
# history and some other tasty things
# Similar to Wirble but compatible with 1.8 and 1.9
extend_console 'brice' do
  Brice.init { |config|
    config.colours
    config.history
  }
end

# Looksee Supercharged method introspection
# in IRB (https://github.com/oggy/looksee)
extend_console 'looksee' do
  # Nothing more to do
end

extend_console 'hirb' do
  Hirb.enable
  extend Hirb::Console
  Hirb::View.enable
end

# Pretty Print to render output more prettier!
extend_console 'pp' do
  # Nothing more to do
end

# Awesome Print to render output more amesome!!
extend_console 'awesome_print' do
  # Nothing more to do
end

def log_sql(enable = true)
  if enable
    ActiveRecord::Base.logger = Logger.new(STDOUT)
    puts 'SQL logging enabled'
  else
    ActiveRecord::Base.logger = nil
    puts 'SQL logging disabled'
  end
  ActiveRecord::Base.clear_all_connections!
  enable
end

