" Beginning of Vundle modification
" set nocompatible " Manage as ViM instead of Vi
" filetype on

set nocompatible " Manage as ViM instead of Vi, practical and required for Vundle
filetype off     " required for Vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" My plugins Beginning
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rails'
"Plugin 'tpope/vim-bundler'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-markdown'
Plugin 'wting/rust.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'elixir-lang/vim-elixir'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'elzr/vim-json'
"Plugin 'slashmili/alchemist.vim'

" My plugins ending

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Plugins Settings:
" * Vim-Airline
let g:airline#extensions#tabline#enabled = 1

" End of Vundle modification

syn on " Use syntaxic coloration
set background=dark

set softtabstop=2 " Use space as tab, eq to st
set tabstop=2 " as above, eq to ts
set shiftwidth=2 " as above, eq to sw
set textwidth=0 " as above, eq to tw
set ignorecase " eq to ic
set number " Display line number
set expandtab " Replace tab by spaces
set backspace=indent,eol,start " Fix backspace issue when not at end of line

" Manage incremental search
set incsearch
set showmatch
set hlsearch

" invisible char
nmap <leader>l :set list!<CR>
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
highlight NonText guifg=#9797a9
highlight SpecialKey guifg=#9797a9

" Keep the cursor in place while joining limes
nnoremap J mzJ`z

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*

" Vim-Airline
let g:airline#extensions#tabline#enabled = 1

" Vim-Better-Whitespace
let g:strip_whitespace_on_save = 1

augroup vim_config
  autocmd FileType gitrebase call LoadGitrebaseBindings()
augroup END

fun! LoadGitrebaseBindings()
  nnoremap  P :Pick<CR>
  nnoremap  S :Squash<CR>
  nnoremap  F :Fixup<CR>
  nnoremap  C :Cycle<CR>
endfun

